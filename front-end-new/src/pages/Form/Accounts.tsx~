import React, { useState, useEffect } from 'react';
import Breadcrumb from '../../components/Breadcrumbs/Breadcrumb';
import SelectGroupOne, {
  FromDBDropdownFormProps,
} from '../../components/Forms/SelectGroup/SelectGroupOne';
import DefaultLayout from '../../layout/DefaultLayout';
import axios from '../../api/axiosconfig';
import useAuthUser from 'react-auth-kit/hooks/useAuthUser';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { AxiosError } from 'axios';

const FormLayout = () => {
  const [accountNumberFormValue, setAccountNumberFormValue] = useState('');
  const [bankCodeFormValue, setBankCodeFormValue] = useState('');

  const [companyDropDownValue, setCompanyDropdownValue] = useState<number>();
  const [bankDropdownValue, setBankDropdownValue] = useState<number>();
  useState<string>('');

  const accountDropdownOptions: FromDBDropdownFormProps['options'] = [
    { label: 'Savings account', value: 'Savings account' },
    { label: 'Checking account', value: 'Savings account' },
  ];

  const [companyDropdownOptions, setCompanyDropdownOptions] = useState<
    FromDBDropdownFormProps['options']
  >([]);

  const [bankDropdownOptions, setBankDropdownOptions] = useState<
    FromDBDropdownFormProps['options']
  >([]);

  const auth: any = useAuthUser();

  // Getters dropdown values
  const getCompanyValue = (value: any) => {
    setCompanyDropdownValue(value);
  };

  const getBankValue = (value: any) => {
    setBankDropdownValue(value);
  };

  useEffect(() => {
    const fetchCompanyNames = async () => {
      try {
        const response = await axios.get('/api/company/getCompany');
        if (response.status === 200) {
          const companies = response.data;
          const options = companies.map(
            (company: { companyName: any; company_id: any }) => ({
              value: company.company_id,
              label: company.companyName,
            }),
          );
          setCompanyDropdownOptions(options);
        }
      } catch (error) {
        console.error(error);
      }
    };
    fetchCompanyNames();
  }, []);

  useEffect(() => {
    const fetchBankNames = async () => {
      try {
        const response = await axios.get('/api/bank/getBank');
        if (response.status === 200) {
          const banks = response.data;
          const options = banks.map(
            (bank: { bank_id: any; bank_name: any }) => ({
              value: bank.bank_id,
              label: bank.bank_name,
            }),
          );
          setBankDropdownOptions(options);
        }
      } catch (error) {
        console.error(error);
      }
    };
    fetchBankNames();
  }, []);

  const createAccount = async () => {
    try {
      const response = await axios.post(
        '/api/account/createAccount',
        {
          user_id: auth.user_id,
          account_number: accountNumberFormValue,
          company_id: companyDropDownValue,
          bank_id: bankDropdownValue,
          bank_code: bankCodeFormValue,
        },
        { withCredentials: true },
      );
      if (response.status === 201) {
        toast.success('Successfully created an account!');
      }
    } catch (err) {
      if (err && err instanceof AxiosError) {
        toast.error(err.response?.data.message);
      } else if (err && err instanceof Error) {
        console.error(`Error: ${err}`);
      }
    }
  };

  return (
    <DefaultLayout>
      <Breadcrumb pageName="Account" />

      <div className="grid grid-cols-1 gap-9 sm:grid-cols-1">
        <div className="flex flex-col gap-9">
          {/* <!-- Contact Form --> */}
          <div className="rounded-sm border border-stroke bg-white shadow-default dark:border-strokedark dark:bg-boxdark">
            <div className="border-b border-stroke py-4 px-6.5 dark:border-strokedark">
              <h3 className="font-medium text-black dark:text-white">
                Find Account
              </h3>
            </div>
            <form action="#">
              <div className="p-6.5">
                <div className="mb-1 flex flex-col gap-6 xl:flex-row">
                  <div className="w-full">
                    <SelectGroupOne
                      label={'Company'}
                      options={companyDropdownOptions}
                      onSelect={getCompanyValue}
                    />
                  </div>
                </div>
                <div className="mb-1 flex flex-col gap-6 xl:flex-row">
                  <div className="w-full xl:w-1/3">
                    <SelectGroupOne
                      label={'Bank'}
                      options={bankDropdownOptions}
                      onSelect={getBankValue}
                    />
                  </div>
                  <div className="w-full xl:w-2/3">
                    <label className="mb-2.5 block text-black dark:text-white">
                      Account Number
                    </label>
                    <input
                      type="text"
                      onChange={(e) => {
                        setAccountNumberFormValue(e.target.value);
                      }}
                      placeholder="Enter Account #"
                      className="w-full rounded border-[1.5px] border-stroke bg-transparent py-3 px-5 text-black outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
                    />
                  </div>
                </div>

                <div className="mb-4.5 flex flex-col gap-6 xl:flex-row">
                  <div className="w-full xl:w-1/3">
                    <label className="mb-2.5 block text-black dark:text-white">
                      Bank Code
                    </label>
                    <input
                      type="text"
                      onChange={(e) => {
                        setBankCodeFormValue(e.target.value);
                      }}
                      placeholder="Enter Bank Code"
                      className="w-full rounded border-[1.5px] border-stroke bg-transparent py-3 px-5 text-black outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
                    />
                  </div>
                </div>

                <div className="flex justify-end gap-3">
                  <button
                    onClick={createAccount}
                    className="flex justify-center rounded bg-primary p-3 font-medium text-gray hover:bg-opacity-90"
                  >
                    Create Account
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
      <ToastContainer />
    </DefaultLayout>
  );
};

export default FormLayout;
